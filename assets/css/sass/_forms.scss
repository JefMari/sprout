//
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
  padding: 0;
  margin: 0;
  border: 0;
  // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
  // so we reset that to ensure it behaves more like a standard block element.
  // See https://github.com/twbs/bootstrap/issues/12359.
  min-width: 0;
}

legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: $spacer-y;
  font-size: ($font-size-base * 1.5);
  line-height: inherit;
  color: $legend-color;
  border: 0;
  border-bottom: 1px solid $legend-border-color;
}

label {
  display: inline-block;
  max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  margin-bottom: 5px;
  font-weight: bold;
}


// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  @include box-sizing(border-box);
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 4px 0 0;
  margin-top: 1px \9; // IE8-9
  line-height: normal;
}

input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  @include tab-focus;
}

// Adjust output element
output {
  display: block;
  padding-top: ($spacer-8 + 1);
  font-size: $font-size-base;
  line-height: $line-height-computed;
  color: $input-color;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
  display: block;
  width: 100%;
  // height: $input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: ($input-padding-y - 2) $no-spacer $input-padding-y;
  font-size: $font-size-base;
  // line-height: $line-height-base;
  line-height: $line-height-computed;
  color: $input-color;
  background-color: $input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: solid $input-border-color;
  // border-radius: $input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  border-radius: 0; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  border-width: 0 0 2px 0;
  // @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
  @include transition(border ease-in-out .15s, box-shadow ease-in-out .15s);

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus ();

  // Placeholder
  @include placeholder;

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    // border: 0;
    // background-color: transparent;
    // -webkit-appearance: none;
    // -moz-appearance: none;
    // apperance: none;
    // display: none;
  }

  &::-ms-clear,
  &::-ms-reveal {
    display: none;
  }

  &:not(:valid) ~ .form-reset {
    display: none;
  }

  &:-webkit-autofill{
    -webkit-box-shadow: 0 0 0px 1000px white inset !important;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: $input-disabled-bg;
    opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
    border-bottom-style: dotted;
  }

  &[disabled],
  fieldset[disabled] & {
    cursor: $default-disabled-cursor;
  }

  // [converter] extracted textarea& to textarea.form-control
}

// Reset height for `textarea`s
textarea.form-control {
  height: auto;
  padding: 8px 0 0;
  resize: vertical;
}

.form-label {
  margin-bottom: 0;
  // font-size: $font-size-sm;
  line-height: $line-height-computed;


  color: $form-label-color;
  font-weight: $form-label-font-weight;
}

// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
  -webkit-appearance: none;
}


// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari. See https://bugs.webkit.org/show_bug.cgi?id=139848
//
// Note that as of 9.3, iOS doesn't support `week`.

@media screen and (-webkit-min-device-pixel-ratio: 0) {
  input[type="date"],
  input[type="time"],
  input[type="datetime-local"],
  input[type="month"] {
    &.form-control {
      // line-height: $input-height-base;
    }

    &.input-sm,
    .input-group-sm & {
      // line-height: $input-height-sm;
    }

    &.input-lg,
    .input-group-lg & {
      // line-height: $input-height-lg;
    }
  }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: $form-group-margin-bottom;
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.form-radio,
.form-checkbox {
  position: relative;
  display: block;
  // margin-top: 8px;
  margin-bottom: 8px;

  label {
    min-height: 20px; // Ensure the input doesn't jump when there is no text
    padding-left: 24px;
    margin-bottom: 0;
    font-weight: normal;
    cursor: pointer;
  }
}
.form-radio input[type="radio"],
.form-radio-inline input[type="radio"],
.form-checkbox input[type="checkbox"],
.form-checkbox-inline input[type="checkbox"] {
  position: absolute;
  margin-left: -24px;
  margin-top: 4px \9;
}

.form-radio + .form-radio,
.form-checkbox + .form-checkbox {
  // margin-top: -8px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.form-radio-inline,
.form-checkbox-inline {
  position: relative;
  display: inline-block;
  padding-left: 24px;
  margin-bottom: 0;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
}
.form-radio-inline + .form-radio-inline,
.form-checkbox-inline + .form-checkbox-inline {
  margin-top: 0;
  margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: $default-disabled-cursor;
  }
}
// These classes are used directly on <label>s
.form-radio-inline,
.form-checkbox-inline {
  &.disabled,
  fieldset[disabled] & {
    cursor: $default-disabled-cursor;
  }
}
// These classes are used on elements with <label> descendants
.form-radio,
.form-checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: $default-disabled-cursor;
    }
  }
}


// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form-control-static {
  // Size it appropriately next to real form controls
  padding-top: ($input-padding-y - 2);
  padding-bottom: $input-padding-y;
  // Remove default margin from `p`
  margin-bottom: 0;
  min-height: (20px + $font-size-base);

  &.input-lg,
  &.input-sm {
    padding-left: 0;
    padding-right: 0;
  }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

@include input-size('.input-sm', $input-height-sm, $input-padding-y-sm, $no-spacer);
.form-group-sm {
  .form-control {
    height: $input-height-sm;
    padding: $no-spacer $no-spacer $input-padding-y-sm;
    // font-size: $font-size-sm;
    // line-height: $line-height-sm;
    // border-radius: $input-border-radius-sm;
  }
  select.form-control {
    height: $input-height-sm;
    // line-height: $input-height-sm;
  }
  textarea.form-control,
  select[multiple].form-control {
    height: auto;
  }
  .form-control-static {
    height: $input-height-sm;
    // min-height: ($line-height-computed + $font-size-sm);
    padding: ($spacer-4 + 1) $spacer-8;
    // font-size: $font-size-sm;
    // line-height: $line-height-sm;
  }
}

@include input-size('.input-lg', $input-height-lg, $input-padding-y-lg, $no-spacer);
.form-group-lg {
  .form-control {
    height: $input-height-lg;
    padding: $input-padding-y-lg $no-spacer;
    // font-size: $font-size-lg;
    // line-height: $line-height-lg;
    // border-radius: $input-border-radius-lg;
  }
  select.form-control {
    height: $input-height-lg;
    // line-height: $input-height-lg;
  }
  textarea.form-control,
  select[multiple].form-control {
    height: auto;
  }
  .form-control-static {
    height: $input-height-lg;
    min-height: (20px + $font-size-lg);
    padding: ($input-padding-y-lg + 1) $input-padding-y-lg;
    // font-size: $font-size-lg;
    // line-height: $line-height-lg;
  }
}


// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-reset,
.has-feedback {
  // Enable absolute positioning
  position: relative;

  // Ensure icons don't overlap text
  .form-control {
    padding-right: $grid-gutter-width + $form-group-margin-bottom;
  }
}



.has-icon {
  position: relative;

  &.left {
    .form-control {
      padding-left: $grid-gutter-width + $form-group-margin-bottom;
    }
    .form-icon {
      left: 0;
    }
  }

  &.right {
    .form-control {
      padding-right: $grid-gutter-width + $form-group-margin-bottom;
    }
    .form-icon {
      right: 0;
    }
  }
}




// Feedback icon (requires .glyphicon classes)
.form-feedback,
.form-icon,
.form-reset {
  font-size: $font-size-base;
  position: absolute;
  top: 0;
  right: 0;
  z-index: 2; // Ensure icon is above input groups
  display: block;
  width: $spacer-24;
  height: $input-height-base;
  line-height: $input-height-base;
  text-align: center;
  // z-index: 10;
}

.form-feedback,
.form-icon {
  pointer-events: none;
}

.form-icon {
  color: $input-placeholder-color;
}

.input-lg ~ .form-feedback,
.input-lg ~ .form-icon,
.input-lg ~ .form-reset,

.input-group-lg ~ .form-feedback,
.input-group-lg ~ .form-icon,
.input-group-lg ~ .form-reset,

.form-group-lg .form-control ~ .form-feedback,
.form-group-lg .form-control ~ .form-icon,
.form-group-lg .form-control ~ .form-reset {
  // width: $grid-gutter-width;
  height: $input-height-lg;
  line-height: $input-height-lg;
}

.input-sm ~ .form-feedback,
.input-sm ~ .form-icon,
.input-sm ~ .form-reset,

.input-group-sm ~ .form-feedback,
.input-group-sm ~ .form-icon,
.input-group-sm ~ .form-reset,

.form-group-sm .form-control ~ .form-feedback,
.form-group-sm .form-control ~ .form-icon,
.form-group-sm .form-control ~ .form-reset {
  // width: $input-height-sm;
  height: $input-height-sm;
  line-height: $input-height-sm;
}

// Feedback states
.has-success {
  @include form-control-validation($brand-success, $brand-success, $brand-success);
}
.has-warning {
  @include form-control-validation($brand-warning, $brand-warning, $brand-warning);
}
.has-info {
  @include form-control-validation($brand-info, $brand-info, $brand-info);
}
.has-error {
  @include form-control-validation($brand-danger, $brand-danger, $brand-danger);
}

// Reposition feedback icon if input has visible label above
.has-feedback label,
.has-icon label,
.has-reset label {

  & ~ .form-feedback,
  & ~ .form-icon,
  & ~ .form-reset {
    top: 20px; // Height of the `label` and its margin
  }
  &.sr-only ~ .form-feedback,
  &.sr-only ~ .form-icon,
  &.sr-only ~ .form-reset {
    top: 0;
  }
}


// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.form-text {
  display: block; // account for any element using form-text
  margin-top: 8px;
  margin-bottom: 8px;
  color: $form-text-color; // lighten the text some for contrast
}


// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

// [converter] extracted from `.form-inline` for libsass compatibility
@mixin form-inline {

  // Kick in the inline
  @media (min-width: $screen-sm-min) {
    // Inline-block all the things for "inline"
    .form-group {
      display: inline-block;
      margin-bottom: 0;
      vertical-align: middle;
    }

    // In navbar-form, allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }

    // Make static controls behave like regular ones
    .form-control-static {
      display: inline-block;
    }

    .input-group {
      display: inline-table;
      vertical-align: middle;

      .input-group-addon,
      .input-group-btn,
      .form-control {
        width: auto;
      }
    }

    // Input groups need that 100% width though
    .input-group > .form-control {
      width: 100%;
    }

    .form-label {
      margin-bottom: 0;
      vertical-align: middle;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .form-radio,
    .form-checkbox {
      display: inline-block;
      margin-top: 0;
      margin-bottom: 0;
      vertical-align: middle;

      label {
        padding-left: 0;
      }
    }
    .form-radio input[type="radio"],
    .form-checkbox input[type="checkbox"] {
      position: relative;
      margin-left: 0;
    }

    // Re-override the feedback icon.
    .has-feedback .form-icon {
      top: 0;
    }
  }
}
// [converter] extracted as `@mixin form-inline` for libsass compatibility
.form-inline {
  @include form-inline;
}



// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

  // Consistent vertical alignment of radios and checkboxes
  //
  // Labels also get some reset styles, but that is scoped to a media query below.
  .form-radio,
  .form-checkbox,
  .form-radio-inline,
  .form-checkbox-inline {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: ($spacer-8 + 1); // Default padding plus a border
  }
  // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .form-radio,
  .form-checkbox {
    min-height: (20px + ($spacer-8 + 1));
  }

  // Make form groups behave like rows
  .form-group {
    @include make-row;
  }

  // Reset spacing and right align labels, but scope to media queries so that
  // labels on narrow viewports stack the same as a default form example.
  @media (min-width: $screen-sm-min) {
    .form-label {
      // text-align: right;
      margin-bottom: 0;
      padding-top: ($spacer-8 + 1); // Default padding plus a border
    }
  }

  // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-feedback,
  .has-reset .form-reset {
    right: floor(($grid-gutter-width / 2));
  }

  .has-icon {
    &.left {
      .form-icon {
        left: floor(($grid-gutter-width / 2));
      }
    }
    &.right {
      .form-icon {
        right: floor(($grid-gutter-width / 2));
      }
    }
  }

  // Form group sizes
  //
  // Quick utility class for applying `.input-lg` and `.input-sm` styles to the
  // inputs and labels within a `.form-group`.
  .form-group-lg {
    @media (min-width: $screen-sm-min) {
      .form-label {
        padding-top: $input-padding-y-lg;
        // font-size: $font-size-lg;
      }
    }
  }
  .form-group-sm {
    @media (min-width: $screen-sm-min) {
      .form-label {
        padding-top: $input-padding-y-lg;
        // font-size: $font-size-sm;
      }
    }
  }
}
